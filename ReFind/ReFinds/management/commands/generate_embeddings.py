from django.core.management.base import BaseCommand
from ReFinds.models import Ad
import replicate
import os
import json
from dotenv import load_dotenv

load_dotenv()  # –∑–∞—Ä–µ–∂–¥–∞–º–µ .env —Ñ–∞–π–ª–∞

class Command(BaseCommand):
    help = '–ì–µ–Ω–µ—Ä–∏—Ä–∞ embedding-–∏ –∑–∞ –≤—Å–∏—á–∫–∏ –æ–±—è–≤–∏ –±–µ–∑ —Ç–∞–∫–∏–≤–∞'

    def handle(self, *args, **kwargs):
        print("üîê Replicate API –∫–ª—é—á:", os.getenv("REPLICATE_API_TOKEN"))  # –ó–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞

        # üëâ –ò–∑–ø–æ–ª–∑–≤–∞–º–µ —Ä–∞–±–æ—Ç–µ—â –º–æ–¥–µ–ª
        model = replicate.models.get("kakaobrain/clip-vit-base-patch32")

        ads = Ad.objects.filter(embedding__isnull=True, image__isnull=False)

        if not ads.exists():
            self.stdout.write(self.style.SUCCESS("‚úÖ –í—Å–∏—á–∫–∏ –æ–±—è–≤–∏ –≤–µ—á–µ –∏–º–∞—Ç embedding."))
            return

        for ad in ads:
            try:
                print(f"üîÑ –ì–µ–Ω–µ—Ä–∏—Ä–∞–º embedding –∑–∞: {ad.title}")
                ad_embedding = model.predict(image=ad.image.file)
                ad.embedding = json.dumps(ad_embedding)
                ad.save()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞ {ad.title}")
            except Exception as e:
                print(f"‚ùå –ü—Ä–æ–±–ª–µ–º —Å {ad.title}: {e}")
